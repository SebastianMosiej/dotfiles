alias ll='ls -al'
alias l='ls -CF'
alias mkdir='mkdir -pv'
alias rsyncp='rsync -r --progress -u'
alias links='find . -maxdepth 1 -type l -ls'
alias cscope='cscope -RbqUuv'
alias xrdbm="xrdb -merge ~/.Xresources"

#export TERM=screen-256color
alias tmux='tmux -2'

export CSCOPE_EDITOR=/usr/bin/vim

alias xclip='xclip -selection clipboard'
alias less='less -R'
alias git_sebastian='git config --local user.name "Sebastian Mosiej"; git config --local user.email sebastian.mosiej@wp.pl '

_GREP_OPTIONS_="--color=always --exclude=tags --binary-files=without-match -s"
alias grep="grep $_GREP_OPTIONS_"
function grep_cpp
{
  #find . \( -iname '*.cpp' -o -iname '*.h' -o -iname '*startup.log' \) -print -exec grep -asnE --color=always $1 $2 {} \;
  grep -srn --exclude-dir=".svn" --exclude-dir=".git" --color=always --include=*.{cpp,h,hpp,cc} "$@" *;
}

function CamelCase2Underscore()
{
  local underscore=`echo $1 | sed 's/\([A-Z]\)/_\l\1/g' | sed 's/^_\([a-z]\)/\1/g'`
  mv $1 $underscore
}

echo_time() {
  echo `date +'%b %e %R '` "$@"
}

strip_ansi_color_codes() {
  local suffix="_no_color"
  if [ $# -ne 1 ]; then
    echo "Pass 1 argument with file path to strip"
    return
  fi
  local inputfile="$(realpath $1)"
  local outputfile="$(dirname $inputfile)/$(basename $inputfile)$suffix"
  sed -r 's/\x1B\[[0-9;]*[mGK]//g' $inputfile > $outputfile
}

#start KVM machine
alias start_vm_1="sudo virsh start debian_vm_1"
alias stop_vm_1="sudo virsh shutdown debian_vm_1"

export PATH=$PATH:~/bin

function change_virt_images_dir() {
  local new_pool=${1:-$HOME/libvirt/images/}
  mkdir -p "$new_pool"
  local current_dir=$(virsh pool-dumpxml default |  sed -n 's/\s*<path>\(.*\)<.*/\1/p')
  if [ "$current_dir" != "$new_pool" ]; then 
    virsh pool-destroy default
    virsh pool-undefine default
    virsh pool-define-as --name default --type dir --target "$new_pool"
    virsh pool-start default
    virsh pool-autostart default
    sudo setfacl -m u:libvirt-qemu:rx $HOME $HOME/.cache
    sudo systemctl restart libvirtd
  fi
}

function install_kvm_machine()
{
  local VIRT_INSTALL=$(get_prog_or_fail "virt-install")
  local virt_machine_name=ubuntu_2004
  local install_iso="$HOME/libvirt/ubuntu-20.04.6-desktop-amd64.iso"
  local vm_image_path="$HOME/libvirt/images/$virt_machine_name.img"

  change_virt_images_dir

  if [ ! -e "$install_iso" ]; then
    echo "Can't find ISO which can be install ($install_iso)" >&2
    return
  fi

  local vm_image_dir="$(dirname $vm_image_path)"
  [ ! -d $vm_image_dir ] && mkdir -p $vm_image_dir
  [ ! -d "$vm_image_dir/shared_folder" ] && mkdir -p "$vm_image_dir/shared_folder"

  #--controller usb,model=none \ -remove temporarly

  virt-install \
    --connect=qemu:///system \
    --virt-type=kvm \
    --name=$virt_machine_name \
    --memory=20000 \
    --vcpus=8 \
    --disk size=50,path=$vm_image_path,bus=virtio,cache=none \
    --location $install_iso,kernel=casper/vmlinuz,initrd=casper/initrd   \
    --os-variant ubuntu20.04 \
    --graphics spice \
    --video=qxl,heads=2,ram=524288,vram=262144,vgamem=262144,vram64=2097152 \
    --noautoconsole \
    --extra-args="auto=true hostname=\"debian-moss\" domain=\"\" DEBCONF_DEBUG=5 console=tty0 console=ttyS0,115200n8 serial" \
    --filesystem source=$vm_image_dir/shared_folder,target=shared_folder

    #--initrd-inject=/home/sebastian/gdrive/programowanie/preseed_debian/preseed.cfg \
    #--initrd-inject=/home/sebastian/gdrive/programowanie/preseed_debian/postinst.sh \
    #--initrd-inject=/home/sebastian/gdrive/programowanie/preseed_debian/postinst.tar.gz \
}

function transcribe_audio_note() {
  local use_gpu=0
  local with_gpu=""
  local device_type="cpu"  #cpu or cuda
  if [ $use_gpu -eq 1 ]; then
    with_gpu="--gpus all"
    device_type="cuda"  #cpu or cuda
  fi
  local audio_file="$1"
  local model="turbo" #large
  local models_dir="${2:-/home/sebastian/dev/whisper/models}"
  if [ $# -eq 1 ]; then
    audio_file="$(realpath $1)"
  else
    echo "parameter - path to audio file"
    exit
  fi
  (cd ~/dev/whisper
  docker run $with_gpu -it -v ${models_dir}:/root/.cache/whisper -v ${HOME}/audio_notes:${HOME}/audio_notes \
    openai-whisper whisper \
    $audio_file --device $device_type --model $model --language Polish --output_dir ${HOME}/audio_notes --output_format txt
  )
} 

if [ "$color_prompt" = yes ]; then
    source ~/.git-prompt.sh
    PS1='${debian_chroot:11+($debian_chroot)}\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;34m\]\w\[\033[00m\]$(__git_ps1 " [%s]")\]\$ '
fi
